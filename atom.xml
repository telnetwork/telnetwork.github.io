<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://telnetwork.github.io</id>
    <title>Gridea</title>
    <updated>2020-03-21T12:56:08.612Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://telnetwork.github.io"/>
    <link rel="self" href="https://telnetwork.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://telnetwork.github.io/images/avatar.png</logo>
    <icon>https://telnetwork.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[CentOS 7 源码编译 Nginx]]></title>
        <id>https://telnetwork.github.io/post/centos-7-yuan-ma-bian-yi-nginx/</id>
        <link href="https://telnetwork.github.io/post/centos-7-yuan-ma-bian-yi-nginx/">
        </link>
        <updated>2020-03-21T12:02:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装依赖软件">安装依赖软件</h3>
<blockquote>
<p>CentOS 7</p>
</blockquote>
<pre><code>yum -y install epel-release
yum update
yum -y install lua-devel patch libtool libtool-ltdl libtool-ltdl-devel libxslt-devel libxslt libxml2 libxml2-devel gd-devel gd GeoIP GeoIP-devel GeoIP-data gperftools gcc gcc-c++ zlib-devel zlib make cmake autoconf openssl openssl-devel libwebp-devel libwebp libvpx perl-devel perl-ExtUtils-Embed autoconf automake gnome-common
</code></pre>
<blockquote>
<p>Ubuntu</p>
</blockquote>
<pre><code>apt-get update
apt-get -y install libgd-dev build-essential zlib1g-dev libpcre3 libpcre3-dev libssl-dev libxslt1-dev libxml2-dev libgeoip-dev libgoogle-perftools-dev libperl-dev libtool openssl gcc g++ google-perftools
</code></pre>
<h3 id="pcre">PCRE</h3>
<pre><code class="language-c++">wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz
tar -xf pcre-8.41.tar.gz -C /usr/local/ &amp;&amp; cd /usr/local/pcre-8.41
./configure --enable-utf8 ; echo $?     // --enable-utf8：对utf-8的支持
make ; echo $?
make install ; echo $?
</code></pre>
<h3 id="openssl">openssl</h3>
<pre><code>wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gz
tar -xf OpenSSL_1_1_1.tar.gz &amp;&amp; mv openssl-OpenSSL_1_1_1 /usr/local/openssl-1.1.1
</code></pre>
<h3 id="创建-nginx-运行用户">创建 Nginx 运行用户</h3>
<pre><code>groupadd www
useradd www -g www -s /sbin/nologin -M
</code></pre>
<h3 id="官网下载-nginx-源码包">官网下载 Nginx 源码包</h3>
<pre><code>wget http://nginx.org/download/nginx-1.16.1.tar.gz
tar -xf nginx-1.16.1.tar.gz &amp;&amp; cd nginx-1.16*
</code></pre>
<h3 id="扩展模块-1-headers">扩展模块 1---- headers</h3>
<pre><code>git clone https://github.com/openresty/headers-more-nginx-module.git /usr/local/ngx_modules/ngx_headers
</code></pre>
<h3 id="扩展模块-2-echo">扩展模块 2 ---- echo</h3>
<pre><code>git clone https://github.com/openresty/echo-nginx-module.git /usr/local/ngx_modules/ngx_echo
</code></pre>
<h3 id="扩展模块-3-brotli">扩展模块 3 ---- brotli</h3>
<pre><code>git clone https://github.com/google/ngx_brotli.git /usr/local/ngx_modules/ngx_brotli
</code></pre>
<h3 id="扩展模块-4-cloudflare-zlib">扩展模块 4 ---- cloudflare-zlib</h3>
<pre><code>git clone https://github.com/cloudflare/zlib.git /usr/local/ngx_modules/cloudflare_zlib
</code></pre>
<h3 id="扩展模块-5-sticky">扩展模块 5 ---- sticky</h3>
<pre><code>wget https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/master.tar.gz
tar xf master.tar.gz
mv nginx-goodies-nginx-sticky-module-ng-08a395c66e42 /usr/local/ngx_modules/ngx_sticky
</code></pre>
<h3 id="扩展模块-6-luajit">扩展模块 6 ---- luajit</h3>
<pre><code>wget https://github.com/openresty/luajit2/archive/v2.1-20200102.tar.gz
tar xf v2.1-20200102.tar.gz &amp;&amp; mv luajit2-2.1-20200102 /usr/local/ngx_modules/luajit2-2.1
cd /usr/local/ngx_modules/luajit2-2.1
make &amp;&amp; make install
echo '/usr/local/lib' &gt;&gt; /etc/ld.so.conf.d/local.conf
export LUA_INCLUDE_DIR=/usr/local/include/luajit-2.1
ldconfig
</code></pre>
<h3 id="扩展模块-7-lua-cjson">扩展模块 7 ---- lua-cjson</h3>
<pre><code>wget https://github.com/openresty/lua-cjson/archive/2.1.0.7.tar.gz
tar xf 2.1.0.7.tar.gz &amp;&amp; mv lua-cjson-2.1.0.7 /usr/local/ngx_modules/
cd /usr/local/ngx_modules/lua-cjson-2.1.0.7
make &amp;&amp; make install
export LUAJIT_LIB=/usr/local/lib
export LUAJIT_INC=/usr/local/include/luajit-2.1
</code></pre>
<h3 id="扩展模块-8-ngx_devel_kit">扩展模块 8 ---- ngx_devel_kit</h3>
<pre><code>wget https://github.com/vision5/ngx_devel_kit/archive/v0.3.1.tar.gz
tar -xf v0.3.1.tar.gz  &amp;&amp; mv ngx_devel_kit-0.3.1 /usr/local/ngx_modules/
</code></pre>
<h3 id="扩展模块-9-lua-nginx">扩展模块 9 ---- lua-nginx</h3>
<pre><code>wget https://github.com/openresty/lua-nginx-module/archive/v0.10.14.tar.gz
tar -xf v0.10.14.tar.gz &amp;&amp; mv lua-nginx-module-0.10.14 /usr/local/ngx_modules/
</code></pre>
<h4 id="为了方便以后重新编译nginx将lua变量写入etcprofile-中">为了方便以后重新编译Nginx,将lua变量写入/etc/profile 中</h4>
<pre><code>#Lua
export LUAJIT_LIB=/usr/local/lib
export LUAJIT_INC=/usr/local/include/luajit-2.1
export LUA_INCLUDE_DIR=/usr/local/include/luajit-2.1
</code></pre>
<h3 id="扩展模块-10-tcmallocubuntu-系统可以直接忽略该步骤以上apt中已安装">扩展模块 10  ---- TCMalloc；Ubuntu 系统可以直接忽略该步骤，以上apt中已安装</h3>
<pre><code># 先编译安装libunwind
wget http://mirror.yongbok.net/nongnu/libunwind/libunwind-1.1.tar.gz
tar -xf libunwind-1.1.tar.gz &amp;&amp; cd libunwind-1.1
CFLAGS=-fPIC ./configure
make CFLAGS=-fPIC
make CFLAGS=-fPIC install

wget https://github.com/gperftools/gperftools/archive/gperftools-2.7.tar.gz
tar -xf gperftools-2.7.tar.gz &amp;&amp; cd gperftools-gperftools-2.7/
./autogen.sh
./configure --enable-frame-pointers
make &amp;&amp; make install ; echo $?
# 编译时添加 &quot;--with-google_perftools_module&quot;
# 将TCMalloc库加载到Linux系统中
echo '/usr/local/lib' &gt;&gt; /etc/ld.so.conf.d/local.conf
ldconfig
</code></pre>
<h4 id="编译-nginx">编译 Nginx</h4>
<pre><code>./configure \
--add-module=/usr/local/ngx_modules/ngx_echo \
--add-module=/usr/local/ngx_modules/ngx_brotli \
--add-module=/usr/local/ngx_modules/ngx_concat \
--add-module=/usr/local/ngx_modules/ngx_headers_info \
--add-module=/usr/local/ngx_modules/ngx_sticky_goodies \
--add-module=/usr/local/ngx_modules/ngx_devel_kit-0.3.1 \
--add-module=/usr/local/ngx_modules/lua-nginx-module-0.10.14 \
--user=www \
--group=www \
--with-http_v2_module \
--with-http_ssl_module \
--with-http_flv_module \
--with-http_mp4_module \
--with-http_dav_module \
--with-http_sub_module \
--with-http_slice_module \
--with-http_geoip_module \
--with-http_realip_module \
--with-http_gunzip_module \
--with-http_addition_module \
--with-http_secure_link_module \
--with-http_stub_status_module \
--with-http_degradation_module \
--with-http_gzip_static_module \
--with-http_auth_request_module \
--with-http_image_filter_module \
--with-http_random_index_module \
--with-http_perl_module=dynamic \
--with-http_xslt_module=dynamic \
--with-stream \
--with-stream_realip_module \
--with-stream_ssl_module \
--with-stream_ssl_preread_module \
--with-stream_geoip_module \
--with-debug \
--with-compat \
--with-threads \
--with-file-aio \
--with-google_perftools_module \
--with-ld-opt=-ltcmalloc_minimal \
--with-zlib=/usr/local/ngx_modules/Cloudflare-zlib \
--with-pcre-jit \
--with-pcre-opt=-fPIC \
--with-pcre=/usr/local/pcre-8.41 \
--with-openssl=/usr/local/openssl-1.1.1 \
--with-openssl-opt='enable-tls1_3 -fPIC' \
--without-poll_module \
--without-select_module \
--without-http_scgi_module \
--without-http_uwsgi_module \
--prefix=/usr/local/nginx \
--sbin-path=/usr/local/nginx/sbin/nginx \
--conf-path=/usr/local/nginx/conf/nginx.conf \
--pid-path=/data/nginx/PID/nginx.pid \
--lock-path=/data/nginx/PID/nginx.lock \
--http-log-path=/data/nginx/logs/access.log \
--error-log-path=/data/nginx/logs/error.log \
--http-scgi-temp-path=/data/nginx/tmps/scgi \
--http-proxy-temp-path=/data/nginx/tmps/proxy \
--http-uwsgi-temp-path=/data/nginx/tmps/uwsgi \
--http-fastcgi-temp-path=/data/nginx/tmps/fastcgi \
--http-client-body-temp-path=/data/nginx/tmps/client_body ; echo $?


make -j 2 ; echo $?
make install ; echo $?

</code></pre>
<h4 id="创建目录">创建目录</h4>
<pre><code>mkdir -pv /data/nginx/{tcmalloc,logs/hack,PID,proxy_cache,proxy_temp,tmp/client_body,tmp/fastcgi}
chown -R www.www /data/
chmod 0777 /data/nginx/tcmalloc
</code></pre>
<h4 id="创建-systemd-服务文件">创建 systemd 服务文件</h4>
<pre><code class="language-c++"># CentOS
/usr/lib/systemd/system/nginx.service

# Ubuntu
/lib/systemd/system/nginx.service
——————————————————————————————————————————————————————————————————————————————————————————
tee /usr/lib/systemd/system/nginx.service &lt;&lt;-'EOF'
[Unit]
Description=The nginx HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/data/nginx/PID/nginx.pid
ExecStartPre=/bin/rm -f /data/nginx/PID/nginx.pid
ExecStartPre=/usr/local/nginx/sbin/nginx -t
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

# 注意事项
# PIDFile：要和编译时的配置保持一致
# rm：which rm
</code></pre>
<h4 id="管理">管理</h4>
<pre><code>systemctl daemon-reload
systemctl enable nginx
systemctl start nginx
systemctl stop nginx
systemctl restart nginx
systemctl reload nginx
systemctl force-reload nginx
systemctl status nginx
</code></pre>
<h4 id="指定动态模块路径">指定动态模块路径</h4>
<p><s>--modules-path=/usr/local/ngx_modules/dynamic</s></p>
<h2 id="篇幅堆的有点多模块配置还没有加上有时间在分割出来">篇幅堆的有点多，模块配置还没有加上，有时间在分割出来</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://telnetwork.github.io/post/hello-gridea/</id>
        <link href="https://telnetwork.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>